name: release-cli

on:
  push:
    tags:
      - tanoshi-cli/v[0-9]+.[0-9]+.[0-9]+

jobs:
  build:
    runs-on: ${{ matrix.os }}
    environment: default
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        include:
          - os: ubuntu-latest
            filename: tanoshi-cli
            asset: tanoshi-cli-linux
          # - os: macos-latest
          #   filename: tanoshi
          #   asset: tanoshi-cli-macos
          # - os: windows-latest
          #   filename: tanoshi.exe
          #   asset: tanoshi-cli-win.exe
    steps:
      - uses: actions/checkout@v2
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
      - name: Install deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev libxml2-dev lsb-release wget software-properties-common libwebkit2gtk-4.0-dev curl libgtk-3-dev libappindicator3-dev patchelf librsvg2-dev libpango1.0-dev
      # - name: Install deps
      #   if: ${{ matrix.os == 'macos-latest' }}
      #   run: brew install icu4c libarchive bzip2 lz4 zlib expat llvm@11
      - name: Install LLVM and Clang
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.0"
      # - name: Install LLVM and Clang
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: |
      #     Invoke-WebRequest -Uri https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/LLVM-11.0.1-win64.exe -OutFile LLVM-11.0.1-win64.exe
      #     7z x .\LLVM-11.0.1-win64.exe -aoa -o'C:\Program Files\LLVM'
      # - name: Download LLVM
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: |
      #     Invoke-WebRequest -Uri https://github.com/faldez/tanoshi-builder/releases/download/v0.1.0/LLVM.7z -OutFile LLVM.7z
      #     7z x .\LLVM.7z -o'C:\'
      # - name: Cache vcpkg
      #   uses: actions/cache@v2
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   with:
      #     path: "C:/vcpkg/installed"
      #     key: vcpkg-${{ matrix.os }}-
      #     restore-keys: |
      #       vcpkg-${{ matrix.os }}-
      # - name: Install deps
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: |
      #     vcpkg integrate install
      #     vcpkg install --only-downloads libarchive:x64-windows-static-md
      #     vcpkg install libarchive:x64-windows-static-md
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.62.0
          override: true
      - name: Build tanoshi-cli
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p tanoshi-cli --release
        env:
          RUSTFLAGS: "-Clink-arg=-Wl,--allow-multiple-definition"
          LLVM_SYS_110_PREFIX: ${{ env.LLVM_PATH }}
      # - name: Build tanoshi
      #   if: ${{ matrix.os == 'macos-latest' }}
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: -p tanoshi --release
      #   env:
      #     PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig
      #     LLVM_SYS_110_PREFIX: /usr/local/opt/llvm
      # - name: Build tanoshi
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: -p tanoshi --release
      #   env:
      #     LLVM_SYS_110_PREFIX: C:\LLVM
      #     LIBCLANG_PATH: C:\Program Files\LLVM\bin
      - name: Copy artifact
        run: |
          mkdir ${{ github.workspace }}/artifact/
          cp ${{ github.workspace }}/target/release/${{ matrix.filename }} ${{ github.workspace }}/artifact/
      - name: Upload Release Asset
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: tanoshi
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          AWS_REGION: ${{ secrets.S3_REGION }}
          SOURCE_DIR: ${{ github.workspace }}/artifact/
          DEST_DIR: tanoshi-cli/${{ env.RELEASE_VERSION }}
      - name: Upload Release Asset
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: tanoshi
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          AWS_REGION: ${{ secrets.S3_REGION }}
          SOURCE_DIR: ${{ github.workspace }}/artifact/
          DEST_DIR: tanoshi-cli/latest
